@model OjVolunteer.Model.OrganizeInfo

@{
    Layout = null;
}

<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <title>ITAEM</title>
    <link href="~/Content/layui/css/layui.css" rel="stylesheet" />
    <link href="~/Content/oj/css/admin.css" rel="stylesheet" />
    <style>
        #choose {
        display:none;
        }

    </style>
</head>
<body>
    <header class="form-title">
        <h4>更改你的相关信息</h4>
    </header>
    <hr class="layui-bg-green">
    <div class="form-content">
        <form class="layui-form layui-form-pane" id="form1">
            @Html.HiddenFor(model => model.OrganizeInfoID)
            @Html.ValidationSummary(true)
            <div class="form-head clearfix">
                <div class="layui-upload form-head-left">
                    @Html.HiddenFor(model => model.OrganizeInfoIcon)
                    <div class="layui-upload-list">
                        <img class="layui-upload-img" src="@Model.OrganizeInfoIcon" id="myimg" name="UserInfoIcon" width="100px" height="120px">
                    </div>
                    <input type="file" id="choose"/>
                </div>
                <div class="form-head-right">
                    <div class="layui-form-item">
                        <label class="layui-form-label">登录名</label>
                        <div class="layui-input-block">
                            @Html.EditorFor(model => model.OrganizeInfoLoginId, new { htmlAttributes = new { @class = "layui-input", type = "text", disabled = "" } })
                        </div>
                    </div>
                    <div class="layui-form-item">
                        <label class="layui-form-label">团队名称</label>
                        <div class="layui-input-block">
                            @Html.EditorFor(model => model.OrganizeInfoShowName, new { htmlAttributes = new { @class = "layui-input", type = "text", autocomplete = "off", lay_verify = "required|orgname" } })
                        </div>
                    </div>

                </div>
            </div>

            <div class="form-foot">
                <div class="layui-form-item">
                    <label class="layui-form-label">负责人姓名</label>
                    <div class="layui-input-block">
                        @Html.EditorFor(model => model.OrganizeInfoPeople, new { htmlAttributes = new { @class = "layui-input", type = "text", autocomplete = "off", lay_verify = "required|username" } })
                    </div>
                </div>
                <div class="layui-form-item">
                    <label class="layui-form-label">手机号</label>
                    <div class="layui-input-block">
                        @Html.EditorFor(model => model.OrganizeInfoPhone, new { htmlAttributes = new { @class = "layui-input", type = "text", autocomplete = "off", lay_verify = "required|phone" } })
                    </div>
                </div>
                <div class="layui-form-item">
                    <label class="layui-form-label">邮箱</label>
                    <div class="layui-input-block">
                        @Html.EditorFor(model => model.OrganizeInfoEmail, new { htmlAttributes = new { @class = "layui-input", type = "text", autocomplete = "off" ,} })
                    </div>
                </div>

            </div>
            @Html.HiddenFor(model => model.OrganizeInfoManageId)
            @Html.HiddenFor(model => model.OrganizeInfoLastTime)
            @Html.HiddenFor(model => model.CreateTime)
            @Html.HiddenFor(model => model.Remark)
            @Html.HiddenFor(model => model.Status)
            @Html.HiddenFor(model => model.OrganizeInfoPwd)
            @Html.HiddenFor(model => model.OrganizeInfoLoginId)
            <div class="form-btns">
                <button type="button" class="layui-btn" id="btnUpdate" lay-submit>确定更改</button>
                <button class="layui-btn" id="cancel" type="button">取消更改</button>
            </div>
        </form>
    </div>

    <script src="~/Content/oj/js/jquery-1.12.4.js"></script>
    <script src="~/Content/layui/layui.all.js"></script>
    <script src="~/Content/oj/js/admin.js"></script>
    <script src="~/Scripts/App/simple-ajax-form.js"></script>
    <script src="~/Scripts/jquery.validate.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
    <script src="~/Content/oj/js/check.js"></script>
    <script src="~/Content/oj/js/bootstrap.min.js"></script>
    <script>
        $(function () {
            var layer;
            layui.use('layer', function () {
                var layer = layui.layer;
            });
            bindUpdateClick();

        });
        //用户点击确定
        function bindUpdateClick() {
            $("#btnUpdate").click(function () {
                $.post("/OrganizeInfo/Edit", $("#form1").serializeArray(), function (data) {
                    if (data != "success") {
                        layer.alert('资料修改出错，请稍后再试', {
                            icon: 2,
                            end: function () {
                                parent.layer.close(index);
                            }
                        });
                        return;
                    } else {
                        var index = parent.layer.getFrameIndex(window.name);
                        layer.alert('资料修改成功', {
                            icon: 1,
                            end: function () {
                                parent.layer.close(index);
                            }
                        });
                    }
                });
            });
        }

        //layui.use('upload', function () {
        //    var upload = layui.upload;
        //    var uploadInst = upload.render({
        //        elem: '#myimg'
        //        , url: '/OrganizeInfo/UploadIcon' //上传接口
        //        , accept: 'images'
        //        , size: 2048
        //        , done: function (res) {
        //            if (res["msg"] == "fail") {
        //                layer.msg('头像更换失败，请稍后再试', { icon: 2 });
        //            } else {
        //                $("#myimg").attr("src", res["src"]);
        //                $("#OrganizeInfoIcon").attr("value", res["src"]);
        //                layer.msg('修改头像成功！', { icon: 1 });
        //            }
        //        }
        //        , error: function () {
        //            layer.msg('头像更换失败，请稍后再试', { icon: 2 });
        //        }
        //    });
        //});

        var layer;
        layui.use('layer', function () {
            var layer = layui.layer;
        });
        //	点击退出关闭弹出层
        $('#cancel').on('click', function () {
            var index = parent.layer.getFrameIndex(window.name);
            parent.layer.close(index);
        });



        var filechooser = document.getElementById("choose");

        var canvas = document.createElement("canvas");
        var ctx = canvas.getContext('2d');

        var tCanvas = document.createElement("canvas");
        var tctx = tCanvas.getContext("2d");
        var maxsize = 200 * 1024;
        $("#myimg").on("click", function () {
            filechooser.click();
        })
            .on("touchstart", function () {
                $(this).addClass("touch")
            })
            .on("touchend", function () {
                $(this).removeClass("touch")
            });
        filechooser.onchange = function () {
            if (!this.files.length) return;
            var files = Array.prototype.slice.call(this.files);
            if (files.length > 1) {
                layer.alert('最多同时只可上传1张图片', { icon: 5 });
                return;
            }
            files.forEach(function (file, i) {
                if (!/\/(?:jpeg|png)/i.test(file.type)) return;
                var reader = new FileReader();

                reader.onload = function () {
                    var result = this.result;
                    var img = new Image();
                    img.src = result;

                    if (result.length <= maxsize) {
                        img = null;
                        upload(result, file.type, result);
                        return;
                    }
                    if (img.complete) {
                        callback();
                    } else {
                        img.onload = callback;
                    }
                    function callback() {
                        var data = compress(img);
                        upload(data, file.type, result);
                        img = null;
                    }
                };
                reader.readAsDataURL(file);
            })
        };

        function compress(img) {
            var initSize = img.src.length;
            var width = img.width;
            var height = img.height;
            //如果图片大于四百万像素，计算压缩比并将大小压至400万以下
            var ratio;
            if ((ratio = width * height / 4000000) > 1) {
                ratio = Math.sqrt(ratio);
                width /= ratio;
                height /= ratio;
            } else {
                ratio = 1;
            }
            canvas.width = width;
            canvas.height = height;
            //        铺底色
            ctx.fillStyle = "#fff";
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            //如果图片像素大于100万则使用瓦片绘制
            var count;
            if ((count = width * height / 1000000) > 1) {
                count = ~~(Math.sqrt(count) + 1); //计算要分成多少块瓦片
                //            计算每块瓦片的宽和高
                var nw = ~~(width / count);
                var nh = ~~(height / count);
                tCanvas.width = nw;
                tCanvas.height = nh;
                for (var i = 0; i < count; i++) {
                    for (var j = 0; j < count; j++) {
                        tctx.drawImage(img, i * nw * ratio, j * nh * ratio, nw * ratio, nh * ratio, 0, 0, nw, nh);
                        ctx.drawImage(tCanvas, i * nw, j * nh, nw, nh);
                    }
                }
            } else {
                ctx.drawImage(img, 0, 0, width, height);
            }
            //进行最小压缩
            var ndata = canvas.toDataURL('image/jpeg', 0.2);
            tCanvas.width = tCanvas.height = canvas.width = canvas.height = 0;
            return ndata;
        }

        function upload(basestr, type, result) {
            var text = window.atob(basestr.split(",")[1]);
            var buffer = new Uint8Array(text.length);
            var pecent = 0, loop = null;
            for (var i = 0; i < text.length; i++) {
                buffer[i] = text.charCodeAt(i);
            }
            var blob = getBlob([buffer], type);
            var xhr = new XMLHttpRequest();
            var formdata = getFormData();
            formdata.append('file', blob);
            xhr.open('post', '/OrganizeInfo/UploadIcon');
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4 && xhr.status == 200) {
                    var jsonData = JSON.parse(xhr.responseText);
                    if (jsonData["msg"] == "success") {
                        $("#myimg").attr("src", jsonData["src"]);
                        $("#OrganizeInfoIcon").attr("value", jsonData["src"]);
                        layer.msg('修改头像成功！', { icon: 1 });
                    } else {
                        layer.msg('头像更换失败，请稍后再试', { icon: 2 });
                    }
                    clearInterval(loop);
                } else {
                    layer.msg('头像更换失败，请稍后再试', { icon: 2 });
                }
            };
            xhr.send(formdata);
        }

        /**
          * 获取blob对象的兼容性写法
          * @@param buffer
          * @@param format
          * @@returns {*}
          */
        function getBlob(buffer, format) {
            try {
                return new Blob(buffer, { type: format });
            } catch (e) {
                var bb = new (window.BlobBuilder || window.WebKitBlobBuilder || window.MSBlobBuilder);
                buffer.forEach(function (buf) {
                    bb.append(buf);
                });
                return bb.getBlob(format);
            }
        }
        /**
         * 获取formdata
         */
        function getFormData() {
            var isNeedShim = ~navigator.userAgent.indexOf('Android')
                && ~navigator.vendor.indexOf('Google')
                && !~navigator.userAgent.indexOf('Chrome')
                && navigator.userAgent.match(/AppleWebKit\/(\d+)/).pop() <= 534;
            return isNeedShim ? new FormDataShim() : new FormData()
        }
        /**
         * formdata 补丁, 给不支持formdata上传blob的android机打补丁
         * @@constructor
         */
        function FormDataShim() {
            console.warn('using formdata shim');
            var o = this,
                parts = [],
                boundary = Array(21).join('-') + (+new Date() * (1e16 * Math.random())).toString(36),
                oldSend = XMLHttpRequest.prototype.send;
            this.append = function (name, value, filename) {
                parts.push('--' + boundary + '\r\nContent-Disposition: form-data; name="' + name + '"');
                if (value instanceof Blob) {
                    parts.push('; filename="' + (filename || 'blob') + '"\r\nContent-Type: ' + value.type + '\r\n\r\n');
                    parts.push(value);
                }
                else {
                    parts.push('\r\n\r\n' + value);
                }
                parts.push('\r\n');
            };
            // Override XHR send()
            XMLHttpRequest.prototype.send = function (val) {
                var fr,
                    data,
                    oXHR = this;
                if (val === o) {
                    // Append the final boundary string
                    parts.push('--' + boundary + '--\r\n');
                    // Create the blob
                    data = getBlob(parts);
                    // Set up and read the blob into an array to be sent
                    fr = new FileReader();
                    fr.onload = function () {
                        oldSend.call(oXHR, fr.result);
                    };
                    fr.onerror = function (err) {
                        throw err;
                    };
                    fr.readAsArrayBuffer(data);
                    // Set the multipart content type and boudary
                    this.setRequestHeader('Content-Type', 'multipart/form-data; boundary=' + boundary);
                    XMLHttpRequest.prototype.send = oldSend;
                }
                else {
                    oldSend.call(this, val);
                }
            };
        }


    </script>


</body>
</html>
