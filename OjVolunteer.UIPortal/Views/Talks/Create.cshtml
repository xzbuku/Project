<!-- 用的库是bootstrap和jquery，css和js文件均为main -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>大学生志愿服务认证中心</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <link href="~/Content/oj/css/bootstrap.css" rel="stylesheet" />
    <link href="~/Content/layui/css/layui.css" rel="stylesheet" />
    <link href="~/Content/oj/css/iconfont.css" rel="stylesheet" />
    <link href="~/Content/oj/css/main.css" rel="stylesheet" />
    <style>
        #choose {
            display: none;
        }

        .img-list {
            margin: 10px 5px;
        }

            .img-list li {
                position: relative;
                display: inline-block;
                width: 100px;
                height: 100px;
                margin: 5px 5px 20px 5px;
                border: 1px solid rgb(100,149,198);
                background: #fff no-repeat center;
                background-size: cover;
            }
    </style>
</head>
<body>
    <header>
        <nav class="writertop">
            <p> 发布心得</p>
        </nav>
    </header>
    <form id="from1">
        <div class="write-content">
            <textarea name="TalkContent" id="TalkContent" class="layui-textarea" placeholder="分享你的心得（6-150字以内）" maxlength=150></textarea>
            <div class="write-icon" id="write-icon">
                <input type="file" id="choose" accept="image/*" multiple>
                <i class="iconfont icon-add" id="upload" style="font-size:40px;border:1px solid #999;color:#999;border-radius:3px;"></i>
            </div>
        </div>
        <input type="hidden" name="TalkImagePath" id="path" value="" />
        <div class="write-btn">
            <button id="btnSubmit" type="button" value="发布" class="layui-btn">发布</button>
        </div>
    </form>

    <ul class="img-list"></ul>
    <a href="javascript:history.go(-1)" class="write-back">
        <span class="glyphicon glyphicon-chevron-left"> </span>
    </a>
    <script src="~/Content/oj/js/jquery-1.12.4.js"></script>
    <script src="~/Content/oj/js/bootstrap.min.js"></script>
    <script src="~/Content/layui/layui.all.js"></script>
    <script src="~/Content/oj/js/main.js"></script>
    <script>
    $(function () {
        $("#btnSubmit").click(function () {
            var TalkContent = $('#TalkContent');
                var str = document.getElementById('TalkContent').value.trim();
            var reg = /[\s\S]*<script>[\s\S]*<\/script>[\s\S]*$/;
            if (TalkContent.val().length >= 6) {
                if (!reg.test(str)) {
                    $.post("/Talks/Create", $("#from1").serializeArray(), function (data) {
                        if (data == "success") {
                            layer.msg("心得发表成功！请等待审核！", {
                                time: 2000,
                                end: function () {
                                    window.location.href = "/UserInfo/Index";
                                }
                            });
                        } else {
                            layer.msg('心得发表失败，请稍后再试！', { time: 2000 });
                        }
                    });
                } else {
                    layer.alert('不能包含非法字符', { icon: 2});
                }
            }
            else {
                layer.alert('心得不得少于6个字符', { icon:2 });
            }
               
            });
        });

    var filechooser = document.getElementById("choose");

    var canvas = document.createElement("canvas");
    var ctx = canvas.getContext('2d');

    var tCanvas = document.createElement("canvas");
    var tctx = tCanvas.getContext("2d");
    var maxsize = 200 * 1024;
    $("#upload").on("click", function () {
        if ($(".img-list li").length >= 9) {
            layer.alert('最多可上传9张图片', { icon: 0 });
            return;
        }
        filechooser.click();
    })
        .on("touchstart", function () {
            $(this).addClass("touch")
        })
        .on("touchend", function () {
            $(this).removeClass("touch")
        });
    filechooser.onchange = function () {
        if (!this.files.length) return;
        var files = Array.prototype.slice.call(this.files);
        if (files.length > 1) {
            layer.alert('最多同时只可上传1张图片', { icon: 5 });
            return;
        }
        files.forEach(function (file, i) {
            if (!/\/(?:jpeg|png)/i.test(file.type)) return;
            var reader = new FileReader();

            reader.onload = function () {
                var result = this.result;
                var img = new Image();
                img.src = result;

                if (result.length <= maxsize) {
                    img = null;
                    upload(result, file.type, result);
                    return;
                }
                if (img.complete) {
                    callback();
                } else {
                    img.onload = callback;
                }
                function callback() {
                    var data = compress(img);
                    upload(data, file.type, result);
                    img = null;
                }
            };
            reader.readAsDataURL(file);
        })
    };

    function compress(img) {
        var initSize = img.src.length;
        var width = img.width;
        var height = img.height;
        //如果图片大于四百万像素，计算压缩比并将大小压至400万以下
        var ratio;
        if ((ratio = width * height / 4000000) > 1) {
            ratio = Math.sqrt(ratio);
            width /= ratio;
            height /= ratio;
        } else {
            ratio = 1;
        }
        canvas.width = width;
        canvas.height = height;
        //        铺底色
        ctx.fillStyle = "#fff";
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        //如果图片像素大于100万则使用瓦片绘制
        var count;
        if ((count = width * height / 1000000) > 1) {
            count = ~~(Math.sqrt(count) + 1); //计算要分成多少块瓦片
            //            计算每块瓦片的宽和高
            var nw = ~~(width / count);
            var nh = ~~(height / count);
            tCanvas.width = nw;
            tCanvas.height = nh;
            for (var i = 0; i < count; i++) {
                for (var j = 0; j < count; j++) {
                    tctx.drawImage(img, i * nw * ratio, j * nh * ratio, nw * ratio, nh * ratio, 0, 0, nw, nh);
                    ctx.drawImage(tCanvas, i * nw, j * nh, nw, nh);
                }
            }
        } else {
            ctx.drawImage(img, 0, 0, width, height);
        }
        //进行最小压缩
        var ndata = canvas.toDataURL('image/jpeg', 0.2);
        tCanvas.width = tCanvas.height = canvas.width = canvas.height = 0;
        return ndata;
    }

    function upload(basestr, type, result) {
        var text = window.atob(basestr.split(",")[1]);
        var buffer = new Uint8Array(text.length);
        var pecent = 0, loop = null;
        for (var i = 0; i < text.length; i++) {
            buffer[i] = text.charCodeAt(i);
        }
        var blob = getBlob([buffer], type);
        var xhr = new XMLHttpRequest();
        var formdata = getFormData();
        formdata.append('imagefile', blob);
        formdata.append('path', $("#path").attr("value"))
        xhr.open('post', 'UploadImage');
        xhr.onreadystatechange = function () {
            if (xhr.readyState == 4 && xhr.status == 200) {
                var jsonData = JSON.parse(xhr.responseText);
                if (jsonData["msg"] == "success") {
                    var li = document.createElement("li");
                    $(".img-list").append($(li));
                    $(li).css("background-image", "url(" + result + ")");
                    $("#path").attr("value", jsonData["path"]);
                }
                clearInterval(loop);
            }
        };
        xhr.send(formdata);
    }

    /**
      * 获取blob对象的兼容性写法
      * @@param buffer
      * @@param format
      * @@returns {*}
      */
    function getBlob(buffer, format) {
        try {
            return new Blob(buffer, { type: format });
        } catch (e) {
            var bb = new (window.BlobBuilder || window.WebKitBlobBuilder || window.MSBlobBuilder);
            buffer.forEach(function (buf) {
                bb.append(buf);
            });
            return bb.getBlob(format);
        }
    }
    /**
     * 获取formdata
     */
    function getFormData() {
        var isNeedShim = ~navigator.userAgent.indexOf('Android')
            && ~navigator.vendor.indexOf('Google')
            && !~navigator.userAgent.indexOf('Chrome')
            && navigator.userAgent.match(/AppleWebKit\/(\d+)/).pop() <= 534;
        return isNeedShim ? new FormDataShim() : new FormData()
    }
    /**
     * formdata 补丁, 给不支持formdata上传blob的android机打补丁
     * @@constructor
     */
    function FormDataShim() {
        console.warn('using formdata shim');
        var o = this,
            parts = [],
            boundary = Array(21).join('-') + (+new Date() * (1e16 * Math.random())).toString(36),
            oldSend = XMLHttpRequest.prototype.send;
        this.append = function (name, value, filename) {
            parts.push('--' + boundary + '\r\nContent-Disposition: form-data; name="' + name + '"');
            if (value instanceof Blob) {
                parts.push('; filename="' + (filename || 'blob') + '"\r\nContent-Type: ' + value.type + '\r\n\r\n');
                parts.push(value);
            }
            else {
                parts.push('\r\n\r\n' + value);
            }
            parts.push('\r\n');
        };
        // Override XHR send()
        XMLHttpRequest.prototype.send = function (val) {
            var fr,
                data,
                oXHR = this;
            if (val === o) {
                // Append the final boundary string
                parts.push('--' + boundary + '--\r\n');
                // Create the blob
                data = getBlob(parts);
                // Set up and read the blob into an array to be sent
                fr = new FileReader();
                fr.onload = function () {
                    oldSend.call(oXHR, fr.result);
                };
                fr.onerror = function (err) {
                    throw err;
                };
                fr.readAsArrayBuffer(data);
                // Set the multipart content type and boudary
                this.setRequestHeader('Content-Type', 'multipart/form-data; boundary=' + boundary);
                XMLHttpRequest.prototype.send = oldSend;
            }
            else {
                oldSend.call(this, val);
            }
        };
    }
    </script>
</body>
</html>
